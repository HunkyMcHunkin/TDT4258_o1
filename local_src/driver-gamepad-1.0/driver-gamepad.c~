/*
 * This is a demo Linux kernel module.
 */

#include <linux/kernel.h>
#include <linux/module.h>
#include <linux/init.h>



//functions chare kernel normaly use
/*
int register_chrdev_region(dev_t first, unsigned int count, *name); //return 0 if sucsessfull

int alloc_chrdev_region(dev_t *dev, unsigned int firstminor, unsigned int count, char *name); //allocate devise number

void unregister_chrdev_region(dev_t first, unsigned int count); //free devise number

struct cdev *my_cdev - cdev_alloc();  //set up char devise
my_cdev -> ops = &my_fops

void cdev_init(struct cdev *dev, dev_t num, unsigned int count);  //tels the kernel to call the char devise

void cdev_del(struct cdev *dev);  // remove a char devise

*/


/*
 * template_init - function to insert this module into kernel space
 *
 * This is the first of two exported functions to handle inserting this
 * code into a running kernel
 *
 * Returns 0 if successfull, otherwise -1
 */
  

static int __init template_init(void)
{
	printk("Hello Worlds, here is your module speaking\n");
	

	return 0;
}

/*
 * template_cleanup - function to cleanup this module from kernel space
 *
 * This is the second of two exported functions to handle cleanup this
 * code from a running kernel
 */

static void __exit template_cleanup(void)
{
	 printk("Short life for a small module...\n");
}



module_init(template_init);
module_exit(template_cleanup);

MODULE_DESCRIPTION("Small module, demo only, not very useful.");
MODULE_LICENSE("GPL");

